<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>GPSJam GPS/GNSS Interference Map</title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <link href="css/mapbox-gl.css" rel="stylesheet">
    <script src="js/mapbox-gl.js"></script>
    <script src="js/d3.v4.min.js"></script>
    <script src="js/h3-js"></script>
    <script src="js/geojson2h3.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'B612';
            background: #222;
            color: #ddd;
        }

        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
        }

        h1 {
            margin: 0cm 0cm 0.1cm 0cm;
        }

        h1 a {
            text-decoration: none;
            color: #ddd;
        }

        a {
            text-decoration: none;
            color: #df86fa
        }

        #content {
            position: absolute;
            z-index: 1000;
            padding: 0.1cm;
            margin: 0.1cm;
            background: #444;
        }

        #legend {
            position: absolute;
            bottom: 2em;
            left: 0;
            background: #eee;
            color: #444;
            padding: 0.1cm;
            margin: 0.1cm;
            border: 1px solid #444;

        }

        #legend.screenshot {
            display: none;
        }

        #legend td {
            padding: 0;
            margin: 0;
        }

        .legend-item {
            display: flex;
            align-items: center;
        }

        .legend-box {
            display: inline-block;
            width: 1em;
            height: 1em;
            margin: 0.2em 0.3em 0.1em 0.1em;
        }

        .legend-high {
            background-color: #ff3333;
        }

        .legend-med {
            background-color: #ffdd33;
        }

        .legend-low {
            background-color: #33ff33;
        }

        input#datepicker {
            font-size: 3em;
            margin-top: 0.5cm;
        }

        input#datepicker.screenshot {
            font-size: 2em;
        }

        @font-face {
            font-family: B612;
            src: url(fonts/B612-Regular.ttf);
        }

        .infolinks.screenshot {
            display: none;
        }

        #adsbx-credits {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0.8;
            position: absolute;
            bottom: 0em;
            left: 0em;
            width: 100%;
            z-index: 99;
        }

        .adsbx-credits-text {
            color: #111;
            font-size: 13px;
        }

        .adsbx-credits-image {
            display: block;
            width: 24px;
            height: 24px;
            background-size: 24px 24px;
            background-repeat: no-repeat;
            background-position: 0;
            background-color: transparent;
            border: none;
            background-image: url("images/adsbx-stealth-48x48.png");
            opacity: 0.7;
            margin: 4px;
        }
    </style>

    <!-- Opengraph Meta Tags -->
    <meta property="og:url" content="<%= url %>">
    <meta property="og:type" content="website">
    <meta property="og:title" content="GPSJam GPS/GNSS Interference Map">
    <meta property="og:description" content="<%= previewDesc %>">
    <meta property="og:image" content="<%= previewUrl %>">

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta property="twitter:domain" content="gpsjam.org">
    <meta property="twitter:url" content="<%= url %>">
    <meta name="twitter:title" content="GPSJam GPS/GNSS Interference Map">
    <meta name="twitter:description" content="<%= previewDesc %>">
    <meta name="twitter:image" content="<%= previewUrl %>">


</head>

<body>
    <div id="content">
        <h1><a href="/">GPSJam</a></h1>
        Daily maps of GPS interference<span class="infolinks maybe-screenshot"> | <a href="/about/">About</a> | <a
                href="/faq/">FAQ</a></span><br>
        <input id="datepicker" class="maybe-screenshot" type="date"><br>
    </div>
    <div id="map"></div>
    <div id="adsbx-credits">
        <span class="adsbx-credits-text">Data provided by</span>
        <span class="adsbx-credits-image"></span>
        <span class="adsbx-credits-text">adsbexchange.com</span>
    </div>
    <div id="legend" class="maybe-screenshot">
        Level of GPS interference
        <!--
        <div class="legend-item"><span class="legend-box legend-low">&nbsp;</span> Low, 0-2%</div>
        <div class="legend-item"><span class="legend-box legend-med">&nbsp;</span> Medium, 2-10%</div>
        <div class="legend-item"><span class="legend-box legend-high">&nbsp;</span> High, &gt; 10%</div>
        -->
        <table>
            <tr>
                <td><span class="legend-box legend-low">&nbsp;</span></td>
                <td>Low</td>
                <td>0-2%</td>
            </tr>
            <tr>
                <td><span class="legend-box legend-med">&nbsp;</span></td>
                <td>Medium</td>
                <td>2-10%</td>
            </tr>
            <tr>
                <td><span class="legend-box legend-high">&nbsp;</span></td>
                <td>High</td>
                <td>&gt; 10%</td>
            </tr>
        </table>
    </div>

    <script>
        let pageStartTime = Date.now();

        let mapDate;
        let mapCenter = [35, 45];
        let mapZoom = 3;
        let dateInfo;
        let map;

        // Parse string like "2022-05-13" into a Date.
        function parseLocalDate(str) {
            // console.log(`Parsing local date ${str}`);
            var mdy = str.split('-');
            let date = new Date(mdy[0], mdy[1] - 1, mdy[2]);
            return new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000);
        }

        function parseUtcDate(str) {
            // console.log(`Parsing UTC date ${str}`);
            var mdy = str.split('-');
            return new Date(mdy[0], mdy[1] - 1, mdy[2]);
        }

        function formatDate(date) {
            const s = date.getUTCFullYear() + "-" + ("0" + (date.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + date.getUTCDate()).slice(-2)
            return s;
        }

        const INTERFERENCE_HIGH = 'high';
        const INTERFERENCE_MED = 'med';
        const INTERFERENCE_LOW = 'low';

        // Given counts for a single hex of aircraft with good GPS and aircraft
        // with bad GPS, computes the interference level.
        function interferenceLevel(good_gps, bad_gps) {
            const bad_frac = (bad_gps - 1) / (bad_gps + good_gps);
            if (bad_frac < 0.02) {
                return INTERFERENCE_LOW
            } else if (bad_frac < 0.10) {
                return INTERFERENCE_MED
            } else {
                return INTERFERENCE_HIGH
            }
        }

        // Given an H3 index, return true if its hexagon crosses the anti-meridian.
        function isH3IndexAM(h3Index) {
            const points = h3.h3ToGeoBoundary(h3Index);
            for (let i = 0; i < points.length; i++) {
                let p1 = points[i];
                let p2 = points[(i + 1) % points.length];
                if (Math.abs(p1[1] - p2[1]) > 180.0) {
                    return true;
                }
            }
            return false;
        }

        function loadH3file(date, map) {
            // Convert date to a string like "2022-05-13" with zero-padding.
            const dateStr = formatDate(date);
            // document.getElementById('datepicker').value = dateStr;
            const h3Filename = dateStr + '-h3_4.csv'
            console.log(`Loading ${date} from ${h3Filename}`);
            let url = 'data/' + h3Filename;
            // Loop over low, med, high and remove that layer.
            d3.csv(
                url,
                allHexes => {
                    for (level of ['low', 'med', 'high']) {
                        const layerName = `${level}`;
                        if (map.getLayer(layerName)) {
                            map.removeLayer(`${level}`);
                            map.removeSource(`${level}-interference-src`);
                        }
                    }
                    addH3CsvToMap(allHexes, map);
                });
        }

        function addH3CsvToMap(rows, map) {
            // Build GeoJSON from the H3 csv data. We build 3 GeoJSON
            // features: One containing hexes with high interference
            // levels, one with medium interference, and one with low
            // interference.
            let start = Date.now();
            let hexes = {};
            hexes[INTERFERENCE_LOW] = [];
            hexes[INTERFERENCE_MED] = [];
            hexes[INTERFERENCE_HIGH] = [];
            // For now let's ignore the hexes that cross the anti-meridian.
            // Someday, let's fix their coordinates. See
            // https://docs.mapbox.com/mapbox-gl-js/example/line-across-180th-meridian/
            allHexes = rows.filter(h => !isH3IndexAM(h.hex));
            allHexes.forEach(h => {
                let level = interferenceLevel(
                    parseInt(h.count_good_aircraft),
                    parseInt(h.count_bad_aircraft));
                hexes[level].push(h.hex);
            });
            const lowGeoJson = h3SetToFeatureCollection(hexes[INTERFERENCE_LOW]);
            const medGeoJson = h3SetToFeatureCollection(hexes[INTERFERENCE_MED]);
            const highGeoJson = h3SetToFeatureCollection(hexes[INTERFERENCE_HIGH]);
            console.log(`Creating GeoJSON took ${(Date.now() - start)} ms`);
            map.addSource('low-interference-src', {
                type: 'geojson',
                data: lowGeoJson
            });
            map.addSource('high-interference-src', {
                type: 'geojson',
                data: highGeoJson
            });
            map.addSource('med-interference-src', {
                type: 'geojson',
                data: medGeoJson
            });
            map.addLayer({
                'id': 'low',
                'type': 'fill',
                'source': 'low-interference-src',
                'layout': {},
                'paint': {
                    'fill-color': '#33ff33',
                    'fill-opacity': 0.5
                }
            });
            map.addLayer({
                'id': 'high',
                'type': 'fill',
                'source': 'high-interference-src',
                'layout': {},
                'paint': {
                    'fill-color': '#ff3333',
                    'fill-opacity': 0.5
                }
            });
            map.addLayer({
                'id': 'med',
                'type': 'fill',
                'source': 'med-interference-src', // reference the data source
                'layout': {},
                'paint': {
                    'fill-color': '#ffff33',
                    'fill-opacity': 0.5
                }
            });
            console.log(`Added ${hexes[INTERFERENCE_LOW].length} low hexes`);
            console.log(`Added ${hexes[INTERFERENCE_MED].length} med hexes`);
            console.log(`Added ${hexes[INTERFERENCE_HIGH].length} high hexes`);
            console.log(`${Date.now()} Adding sources and layers took ${(Date.now() - start)} ms`);
            map.on('idle', () => {
                console.log(`Map idle in ${(Date.now() - pageStartTime)} ms`);
                map.fire('screenshot-ready');
            });
        }

        // Puts the current lat, lon, zoom, and date into the URL.
        function syncStateToUrl() {
            const lat = map.getCenter().lat.toFixed(5);
            const lon = map.getCenter().lng.toFixed(5);
            const zoom = map.getZoom().toFixed(1);
            const dateStr = mapDate.getUTCFullYear() + "-" + ("0" + (mapDate.getUTCMonth() + 1)).slice(-2) + "-" + ("0" + mapDate.getUTCDate()).slice(-2)
            // Create a new URL based on the current URL plus the new lat, lon, zoom, and date.
            let url = new URL(window.location.href);
            url.searchParams.set('lat', lat);
            url.searchParams.set('lon', lon);
            url.searchParams.set('z', zoom);
            url.searchParams.set('date', dateStr);
            window.history.pushState({}, '', url.href);
        }

        async function loadManifest() {
            return new Promise((resolve, reject) => {
                console.log('Loading manifest')
                const url = 'data/manifest.csv';
                d3.csv(
                    url,
                    rows => {
                        const dateInfo = {};
                        dateInfo.latestDate = parseUtcDate(rows[rows.length - 1].date);
                        console.log(`Set latest date to ${dateInfo.latestDate}`);
                        dateInfo.earliestDate = parseUtcDate(rows[0].date);
                        console.log(`Set earliest date to ${dateInfo.earliestDate}`);
                        dateInfo.byDate = {};
                        for (let row of rows) {
                            let date = parseUtcDate(row.date);
                            dateInfo.byDate[date] = row.count;
                        }
                        resolve(dateInfo);
                    }
                );
            });
        }

        function initMap() {
            mapboxgl.accessToken = 'pk.eyJ1Ijoid2lzZW1hbiIsImEiOiJHbzAtOHgwIn0.Pj1Nx77LS1-ujzRKJVOttA';
            map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: mapCenter,
                zoom: mapZoom,
                projection: 'globe',
                // maxZoom: 6
            });

            map.on('screenshot-ready', () => {
                console.log(`Screenshot ready in ${(Date.now() - pageStartTime)} ms`);
            });
            map.on('load', () => {
                console.log(`Map loaded in ${(Date.now() - pageStartTime)} ms`);
                // map.once('idle', () => {
                // console.log(`Map load idle in ${(Date.now() - startTime)} ms`);
                loadH3file(mapDate, map);
                // });
            });

            map.on('moveend', syncStateToUrl);
            map.on('zoomend', syncStateToUrl);
        }


        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);

        // When the date picker value changes, load that day's data.
        document.getElementById('datepicker').addEventListener('change', function () {
            console.log(`Date changed to ${this.value}`);
            // Convert to UTC date.

            const date = parseLocalDate(this.value);
            mapDate = date;
            loadH3file(date, map);
            syncStateToUrl();
        });

        // Now handle URL parameters.

        // Check whether we're in screenshot mode.
        if (urlParams.has('screenshot')) {
            for (e of document.getElementsByClassName('maybe-screenshot')) {
                e.classList.add("screenshot");
            }

        }
        // If the URL contains lat & lon, center the map on that location.
        if (urlParams.has('lat') && urlParams.has('lon')) {
            const lat = parseFloat(urlParams.get('lat'));
            const lon = parseFloat(urlParams.get('lon'));
            mapCenter = [lon, lat];
        }
        // If the URL contains &zoom, set the map zoom level.
        if (urlParams.has('z')) {
            const zoom = parseFloat(urlParams.get('z'));
            mapZoom = zoom;
        }

        (async function () {
            if (urlParams.has('date')) {
                // If the URL contains a date, load that date and display it,
                // then load the date manifest.
                const dateStr = urlParams.get('date');
                const date = parseUtcDate(dateStr);
                mapDate = date;
                // Set the datepicker date immediately to match the URL date.
                const datePicker = document.getElementById('datepicker');
                datepicker.value = dateStr
                initMap();
                dateInfo = await loadManifest();
                datePicker.min = formatDate(dateInfo.earliestDate);
                datePicker.max = formatDate(dateInfo.latestDate);
                console.log(`Loaded manifest in ${(Date.now() - pageStartTime)} ms`);
            } else {
                // If the URL doesn't contain a date, then load the date
                // manifest and use that to choose a date to display.
                dateInfo = await loadManifest();
                console.log(`Loaded manifest in ${(Date.now() - pageStartTime)} ms`);
                mapDate = dateInfo.latestDate;
                const datePicker = document.getElementById('datepicker');
                datepicker.value = formatDate(mapDate);
                datePicker.min = formatDate(dateInfo.earliestDate);
                datePicker.max = formatDate(dateInfo.latestDate);
                initMap();
            }
        })();
    </script>
</body>

</html>